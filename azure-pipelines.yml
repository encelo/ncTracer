variables:
  package_name: ncTracer
  libraries_branch: libraries-OS-COMPILER
  ncine_branch: nCine-BRANCHNAME-OS-COMPILER
  ncine_source_branch: develop
  deploy_message:
    "Push artifact from Azure Pipelines build $(Build.BuildNumber) with id $(Build.BuildId)

     - $(package_name) artifact from branch '$(Build.SourceBranchName)' with commit id $(Build.SourceVersion)"
  deploy_branch: $(package_name)-BRANCHNAME-OS-COMPILER
  ndk_version: r21d

jobs:
- job: Linux_macOS
  displayName: Linux and macOS

  strategy:
    matrix:
      Linux GCC Debug:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Debug

      Linux GCC Release:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Release

      Linux GCC BinDist:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: BinDist

      Linux Clang Debug:
        imageName: 'ubuntu-18.04'
        CC: clang
        CXX: clang++
        BuildType: Debug

      Linux Clang Release:
        imageName: 'ubuntu-18.04'
        CC: clang
        CXX: clang++
        BuildType: Release

      Linux Clang BinDist:
        imageName: 'ubuntu-18.04'
        CC: clang
        CXX: clang++
        BuildType: BinDist

      macOS Debug:
        imageName: 'macOS-10.14'
        BuildType: Debug

      macOS Release:
        imageName: 'macOS-10.14'
        BuildType: Release

      macOS BinDist:
        imageName: 'macOS-10.14'
        BuildType: BinDist

  pool:
    vmImage: $(imageName)

  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y libgl1-mesa-dev

    displayName: 'Install nCine Build Dependencies on Linux'
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: |
      curl -fsSL https://cmake.org/files/v3.16/cmake-3.16.9-Linux-x86_64.sh -o cmakeinstall.sh && \
      chmod +x cmakeinstall.sh && \
      sudo ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir && \
      rm cmakeinstall.sh

    displayName: 'Install Latest CMake on Linux'
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: |
      git fetch --unshallow || true

    displayName: 'Unshallow Git Repository for Versioning'
    condition: eq( variables['BuildType'], 'BinDist' )

  - script: |
      if [ "$(Agent.OS)" == "Linux" ]; then
        export OS=linux
      elif [ "$(Agent.OS)" == "Darwin" ]; then
        export OS=darwin
        export CC=appleclang
      fi

      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/OS/'"$OS"'/'`
      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/COMPILER/'"$CC"'/'`

      cd ..
      git clone https://github.com/nCine/nCine-libraries-artifacts.git
      cd nCine-libraries-artifacts
      git checkout $LIBRARIES_BRANCH
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      mv nCine-external ..
      cd ..
      rm -rf nCine-libraries-artifacts

      git clone https://github.com/encelo/pmTracer.git
      # ncTracer-data repository is not part of the nCine organization
      git clone https://github.com/encelo/$(package_name)-data.git

    displayName: 'Download nCine-libraries, pmTracer and $(package_name)-data'

  - script: |
      cd ..
      git clone https://github.com/nCine/nCine-data.git
      git clone https://github.com/nCine/nCine.git --branch $NCINE_SOURCE_BRANCH

    displayName: 'Download nCine source and data'

  - script: |
      cd ../nCine
      if [[ "$(BuildType)" == "BinDist" ]]; then
        export NCINE_BUILD_TYPE=Release
      else
        export NCINE_BUILD_TYPE=$(BuildType)
      fi
      export CMAKE_ARGS="-B ../nCine-build-$NCINE_BUILD_TYPE -D CMAKE_BUILD_TYPE=$NCINE_BUILD_TYPE -D NCINE_DYNAMIC_LIBRARY=OFF -D NCINE_PREFERRED_BACKEND=SDL2 -D NCINE_WITH_WEBP=OFF -D NCINE_WITH_AUDIO=OFF -D NCINE_BUILD_TESTS=OFF"

      if [ "$(Agent.OS)" == "Linux" ]; then
        export CMAKE_ARGS="$CMAKE_ARGS -D CMAKE_PREFIX_PATH=$(pwd)/../nCine-external"
      fi

      cmake $CMAKE_ARGS
      cd ..
      make -j2 -C nCine-build-$NCINE_BUILD_TYPE

    displayName: 'CMake Configuration and Make of nCine as a static library'

  - script: |
      export CMAKE_ARGS="-B ../$(package_name)-build-$(BuildType) -D PMTRACER_ROOT=$(pwd)/../pmTracer"

      if [ "$(Agent.OS)" == "Linux" ]; then
        export CMAKE_ARGS="$CMAKE_ARGS -D CMAKE_PREFIX_PATH=$(pwd)/../nCine-external"
      fi

      if [[ "$(BuildType)" == "BinDist" ]]; then
        cmake $CMAKE_ARGS -D PACKAGE_OPTIONS_PRESETS=$(BuildType) -D nCine_DIR=$(pwd)/../nCine-build-Release
      else
        cmake $CMAKE_ARGS -D CMAKE_BUILD_TYPE=$(BuildType) -D nCine_DIR=$(pwd)/../nCine-build-$(BuildType)
      fi

    displayName: 'CMake Configuration'

  - script: |
      if [ "$(Agent.OS)" == "Linux" ]; then
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/../nCine-external/lib
      fi

      make -j2 -C ../$(package_name)-build-$(BuildType)

    displayName: 'Make'

  - script: |
      make package -C ../$(package_name)-build-$(BuildType)

    displayName: 'Package'
    condition: eq( variables['BuildType'], 'BinDist' )

  - script: |
      git config --global user.email "pipelines@azure.com"
      git config --global user.name "Azure Pipelines"

      if [ "$(Agent.OS)" == "Linux" ]; then
        export OS=linux
        export PACKAGE_EXT=tar.gz
      elif [ "$(Agent.OS)" == "Darwin" ]; then
        export OS=darwin
        export CC=appleclang
        export PACKAGE_EXT=dmg
      fi

      cd ..
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/BRANCHNAME/'"$(Build.SourceBranchName)"'/'`
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/OS/'"$OS"'/'`
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/COMPILER/'"$CC"'/'`
      # ncTracer-artifacts repository is not part of the nCine organization
      git clone https://$MAPPED_GH_TOKEN@github.com/encelo/$(package_name)-artifacts.git >/dev/null 2>&1
      cd $(package_name)-artifacts

      git checkout $DEPLOY_BRANCH || git checkout --orphan $DEPLOY_BRANCH
      git reset
      git rm *
      mv -f ../$(package_name)-build-$(BuildType)/*.$PACKAGE_EXT .
      git add *.$PACKAGE_EXT
      git commit --amend -m "$(DEPLOY_MESSAGE)" || git commit -m "$(DEPLOY_MESSAGE)"
      git push --force || git push --set-upstream origin $DEPLOY_BRANCH

    displayName: 'Push Artifacts'
    condition: and( eq( variables['BuildType'], 'BinDist' ), succeeded() )
    env:
      MAPPED_GH_TOKEN: $(GH_TOKEN)

- job: Android
  displayName: Android

  strategy:
    matrix:
      Debug armeabi-v7a:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Debug
        Arch: armeabi-v7a

      Debug arm64-v8a:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Debug
        Arch: arm64-v8a

      Debug x86_64:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Debug
        Arch: x86_64

      Release armeabi-v7a:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Release
        Arch: armeabi-v7a

      Release arm64-v8a:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Release
        Arch: arm64-v8a

      Release x86_64:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Release
        Arch: x86_64

  pool:
    vmImage: $(imageName)

  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y libgl1-mesa-dev

    displayName: 'Install nCine Build Dependencies'

  - script: |
      curl -sL https://cmake.org/files/v3.16/cmake-3.16.9-Linux-x86_64.sh -o cmakeinstall.sh \
      && chmod +x cmakeinstall.sh \
      && sudo ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir \
      && rm cmakeinstall.sh

    displayName: 'Install Latest CMake'

  - script: |
      git fetch --unshallow || true

    displayName: 'Unshallow Git Repository for Versioning'

  - script: |
      export OS=linux

      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/OS/'"$OS"'/'`
      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/COMPILER/'"$CC"'/'`

      cd ..
      git clone https://github.com/nCine/nCine-libraries-artifacts.git
      cd nCine-libraries-artifacts
      git checkout $LIBRARIES_BRANCH
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      mv nCine-external ..
      git checkout android-libraries-armeabi-v7a
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      git checkout android-libraries-arm64-v8a
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      git checkout android-libraries-x86_64
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      mv nCine-android-external ..
      cd ..
      rm -rf nCine-libraries-artifacts

      git clone https://github.com/encelo/pmTracer.git
      # ncTracer-data repository is not part of the nCine organization
      git clone https://github.com/encelo/$(package_name)-data.git

    displayName: 'Download nCine-libraries, pmTracer and $(package_name)-data'

  - script: |
      cd ..
      git clone https://github.com/nCine/nCine-data.git
      git clone https://github.com/nCine/nCine.git --branch $NCINE_SOURCE_BRANCH

    displayName: 'Download nCine source and data'

  - script: |
      export NDK_URL=https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-linux-x86_64.zip

      cd ..
      curl -fsSL $NDK_URL -o ndk.zip
      unzip -q ndk.zip && rm -f ndk.zip

    displayName: 'Download Android NDK'

  - script: |
      export ANDROID_NDK_HOME=$(pwd)/../android-ndk-$NDK_VERSION

      cd ../nCine
      export CMAKE_ARGS=" -B ../nCine-build-$(BuildType) -D CMAKE_BUILD_TYPE=$(BuildType) -D NCINE_DYNAMIC_LIBRARY=OFF -D NCINE_WITH_WEBP=OFF -D NCINE_WITH_AUDIO=OFF -D NCINE_BUILD_TESTS=OFF -D NCINE_BUILD_ANDROID=ON -D NCINE_NDK_ARCHITECTURES=$(Arch) -D CMAKE_PREFIX_PATH=$(pwd)/../nCine-external"

      cmake $CMAKE_ARGS
      cd ..
      make -j2 -C nCine-build-$(BuildType)

    displayName: 'CMake Configuration and Make of nCine as a static library'

  - script: |
      export ANDROID_NDK_HOME=$(pwd)/../android-ndk-$NDK_VERSION

      cmake -B ../$(package_name)-build-$(BuildType) -D CMAKE_BUILD_TYPE=$(BuildType) -D PACKAGE_NDK_ARCHITECTURES=$(Arch) -D PACKAGE_BUILD_ANDROID=ON -D PACKAGE_ASSEMBLE_APK=ON -D nCine_DIR=$(pwd)/../nCine-build-$(BuildType) -D CMAKE_PREFIX_PATH=$(pwd)/../nCine-external -D PMTRACER_ROOT=$(pwd)/../pmTracer

    displayName: 'CMake Configuration'

  - script: |
      cd ../$(package_name)-build-$(BuildType)/android
      gradle assemble$(BuildType)

    displayName: 'Gradle Assemble'

  - script: |
      git config --global user.email "pipelines@azure.com"
      git config --global user.name "Azure Pipelines"

      cd ..
      export DEPLOY_BRANCH=$(package_name)-$(Build.SourceBranchName)-android-$(Arch)-$(BuildType)
      # ncTracer-artifacts repository is not part of the nCine organization
      git clone https://$MAPPED_GH_TOKEN@github.com/encelo/$(package_name)-artifacts.git >/dev/null 2>&1
      cd $(package_name)-artifacts

      git checkout $DEPLOY_BRANCH || git checkout --orphan $DEPLOY_BRANCH
      git reset
      git rm *
      mv -f ../$(package_name)-build-$(BuildType)/android/build/outputs/apk/*/*.apk .
      git add *.apk
      git commit --amend -m "$(DEPLOY_MESSAGE)" || git commit -m "$(DEPLOY_MESSAGE)"
      git push --force || git push --set-upstream origin $DEPLOY_BRANCH

    displayName: 'Push Artifacts'
    condition: succeeded()
    env:
      MAPPED_GH_TOKEN: $(GH_TOKEN)

- job: Emscripten
  displayName: Emscripten

  strategy:
    matrix:
      Emscripten Debug:
        imageName: 'ubuntu-18.04'
        OS: emscripten
        CC: emcc
        BuildType: Debug

      Emscripten Release:
        imageName: 'ubuntu-18.04'
        OS: emscripten
        CC: emcc
        BuildType: Release

      Emscripten BinDist:
        imageName: 'ubuntu-18.04'
        OS: emscripten
        CC: emcc
        BuildType: BinDist

  pool:
    vmImage: $(imageName)

  steps:
  - script: |
      curl -fsSL https://cmake.org/files/v3.14/cmake-3.14.5-Linux-x86_64.sh -o cmakeinstall.sh && \
      chmod +x cmakeinstall.sh && \
      sudo ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir && \
      rm cmakeinstall.sh

    displayName: 'Install Latest CMake on Linux'
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: |
      sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10

      cd ..
      git clone https://github.com/emscripten-core/emsdk.git
      cd emsdk
      ./emsdk install latest
      ./emsdk activate latest

    displayName: 'Install Emscripten SDK'

  - script: |
      git fetch --unshallow || true

    displayName: 'Unshallow Git Repository for Versioning'
    condition: eq( variables['BuildType'], 'BinDist' )

  - script: |
      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/OS/'"$OS"'/'`
      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/COMPILER/'"$CC"'/'`

      cd ..
      git clone https://github.com/nCine/nCine-libraries-artifacts.git
      cd nCine-libraries-artifacts
      git checkout $LIBRARIES_BRANCH
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      mv nCine-external-emscripten ..

      cd ..
      rm -rf nCine-libraries-artifacts

      git clone https://github.com/encelo/pmTracer.git
      # ncTracer-data repository is not part of the nCine organization
      git clone https://github.com/encelo/$(package_name)-data.git

    displayName: 'Download nCine-libraries, pmTracer and $(package_name)-data'

  - script: |
      cd ..
      git clone https://github.com/nCine/nCine-data.git
      git clone https://github.com/nCine/nCine.git --branch $NCINE_SOURCE_BRANCH

    displayName: 'Download nCine source and data'

  - script: |
      source ../emsdk/emsdk_env.sh

      cd ../nCine
      if [[ "$(BuildType)" == "BinDist" ]]; then
        export NCINE_BUILD_TYPE=Release
      else
        export NCINE_BUILD_TYPE=$(BuildType)
      fi
      export CMAKE_ARGS="-B ../nCine-build-$NCINE_BUILD_TYPE -D CMAKE_BUILD_TYPE=$NCINE_BUILD_TYPE -D NCINE_PREFERRED_BACKEND=SDL2 -D NCINE_WITH_THREADS=ON -D NCINE_WITH_WEBP=OFF -D NCINE_WITH_AUDIO=OFF -D NCINE_BUILD_TESTS=OFF"

      emcmake cmake $CMAKE_ARGS
      cd ..
      make -j2 -C nCine-build-$NCINE_BUILD_TYPE

    displayName: 'CMake Configuration and Make of nCine as a static library'

  - script: |
      source ../emsdk/emsdk_env.sh
      export CMAKE_ARGS="-B ../$(package_name)-build-$(BuildType) -D PMTRACER_ROOT=$(pwd)/../pmTracer"

      if [[ "$(BuildType)" == "BinDist" ]]; then
        emcmake cmake $CMAKE_ARGS -D PACKAGE_OPTIONS_PRESETS=$(BuildType) -D nCine_DIR=$(pwd)/../nCine-build-Release
      else
        emcmake cmake $CMAKE_ARGS -D CMAKE_BUILD_TYPE=$(BuildType) -D nCine_DIR=$(pwd)/../nCine-build-$(BuildType)
      fi

    displayName: 'CMake Configuration'

  - script: |
      make -j2 -C ../$(package_name)-build-$(BuildType)

    displayName: 'Make'

  - script: |
      make package -C ../$(package_name)-build-$(BuildType)

    displayName: 'Package'
    condition: eq( variables['BuildType'], 'BinDist' )

  - script: |
      git config --global user.email "pipelines@azure.com"
      git config --global user.name "Azure Pipelines"

      cd ..
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/BRANCHNAME/'"$(Build.SourceBranchName)"'/'`
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/OS/'"$OS"'/'`
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/COMPILER/'"$CC"'/'`
      # ncTracer-artifacts repository is not part of the nCine organization
      git clone https://$MAPPED_GH_TOKEN@github.com/encelo/$(package_name)-artifacts.git >/dev/null 2>&1
      cd $(package_name)-artifacts

      git checkout $DEPLOY_BRANCH || git checkout --orphan $DEPLOY_BRANCH
      git reset
      git rm *
      mv -f ../$(package_name)-build-$(BuildType)/*.tar.gz .
      git add *.tar.gz
      git commit --amend -m "$(DEPLOY_MESSAGE)" || git commit -m "$(DEPLOY_MESSAGE)"
      git push --force || git push --set-upstream origin $DEPLOY_BRANCH

    displayName: 'Push Artifacts'
    condition: and( eq( variables['BuildType'], 'BinDist' ), succeeded() )
    env:
      MAPPED_GH_TOKEN: $(GH_TOKEN)

- job: Windows_MinGW
  displayName: Windows and MinGW

  strategy:
    matrix:
      VS2017 Debug:
        imageName: 'vs2017-win2016'
        Compiler: vs2017
        BuildType: Debug

      VS2017 Release:
        imageName: 'vs2017-win2016'
        Compiler: vs2017
        BuildType: Release

      VS2017 BinDist:
        imageName: 'vs2017-win2016'
        Compiler: vs2017
        BuildType: BinDist

      VS2019 Debug:
        imageName: 'windows-2019'
        Compiler: vs2019
        BuildType: Debug

      VS2019 Release:
        imageName: 'windows-2019'
        Compiler: vs2019
        BuildType: Release

      VS2019 BinDist:
        imageName: 'windows-2019'
        Compiler: vs2019
        BuildType: BinDist

      MinGW GCC Debug:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: gcc
        CXX: g++
        BuildType: Debug

      MinGW GCC Release:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: gcc
        CXX: g++
        BuildType: Release

      MinGW GCC BinDist:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: gcc
        CXX: g++
        BuildType: BinDist

      MinGW Clang Debug:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: clang
        CXX: clang++
        BuildType: Debug

      MinGW Clang Release:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: clang
        CXX: clang++
        BuildType: Release

      MinGW Clang BinDist:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: clang
        CXX: clang++
        BuildType: BinDist

  pool:
    vmImage: $(imageName)

  steps:
  - powershell: |
      choco install --no-progress msys2 --params="/InstallDir:C:\msys64 /NoUpdate /NoPath"
      C:\msys64\usr\bin\pacman --noconfirm -Syy

    displayName: 'Install and Update MSYS2 on Windows'
    condition: eq( variables['Compiler'], 'mingw64' )

  - powershell: |
      C:\msys64\usr\bin\pacman --noconfirm -S mingw-w64-x86_64-glew mingw-w64-x86_64-glfw mingw-w64-x86_64-SDL2 mingw-w64-x86_64-openal mingw-w64-x86_64-libvorbis mingw-w64-x86_64-libwebp mingw-w64-x86_64-lua cmake

      if ($env:CC -eq "gcc") { C:\msys64\usr\bin\pacman --noconfirm -S mingw-w64-x86_64-gcc }
      else { C:\msys64\usr\bin\pacman --noconfirm -S mingw-w64-x86_64-clang }

      C:\msys64\usr\bin\pacman --noconfirm -Scc

    displayName: 'Install Build Dependencies on MinGW'
    condition: eq( variables['Compiler'], 'mingw64' )

  - powershell: |
      $env:GIT_REDIRECT_STDERR = '2>&1'
      git fetch --unshallow; if (-not $?) { return }

    displayName: 'Unshallow Git Repository for Versioning'
    condition: eq( variables['BuildType'], 'BinDist' )

  - powershell: |
      $env:GIT_REDIRECT_STDERR = '2>&1'
      $env:vsversion = switch ("$(imageName)")
      {
        "windows-2019" {"vs2019"}
        "vs2017-win2016" {"vs2017"}
      }

      cd ..
      git clone https://github.com/nCine/nCine-libraries-artifacts.git
      cd nCine-libraries-artifacts

      if ($env:Compiler -ne "mingw64")
      {
        $env:LIBRARIES_BRANCH = $env:LIBRARIES_BRANCH -replace "OS","windows" -replace "COMPILER",$env:vsversion
        git checkout $env:LIBRARIES_BRANCH
        $env:LIBRARIES_FILE = Get-ChildItem -Path $(pwd) -Name -File | Select-Object -First 1
        7z x $env:LIBRARIES_FILE

        Move-Item -Path nCine-external -Destination ..
      }

      cd ..
      Remove-Item nCine-libraries-artifacts -Recurse -Force

      git clone https://github.com/encelo/pmTracer.git
      # ncTracer-data repository is not part of the nCine organization
      git clone https://github.com/encelo/$(package_name)-data.git

    displayName: 'Download nCine-libraries, pmTracer and $(package_name)-data'

  - script: |
      cd ..
      git clone https://github.com/nCine/nCine-data.git
      git clone https://github.com/nCine/nCine.git --branch $(ncine_source_branch)

    displayName: 'Download nCine source and data'

  - powershell: |
      $env:generator = switch ("$(imageName)")
      {
        "windows-2019" {"Visual Studio 16 2019"}
        "vs2017-win2016" {"Visual Studio 15 2017"}
      }

      cd ../nCine
      if ($env:BuildType -eq "BinDist")
        { $nCineBuildType = "Release" }
      else
        { $nCineBuildType = $env:BuildType }

      cmake -G "$env:generator" -A x64 -B ../nCine-build-$nCineBuildType -D CMAKE_BUILD_TYPE=$nCineBuildType -D NCINE_DYNAMIC_LIBRARY=OFF -D NCINE_PREFERRED_BACKEND=SDL2 -D NCINE_WITH_WEBP=OFF -D NCINE_WITH_AUDIO=OFF -D NCINE_BUILD_TESTS=OFF

      cd ..
      cmake --build nCine-build-$nCineBuildType --config $nCineBuildType

    displayName: 'CMake Configuration and Make of nCine as a static library on Windows'
    condition: ne( variables['Compiler'], 'mingw64' )

  - powershell: |
      $env:PATH = "C:\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
      $env:MSYSTEM = "MINGW64"

      cd ../nCine
      if ($env:BuildType -eq "BinDist")
      {
          C:\msys64\usr\bin\bash.exe -lc 'cmake -G \"MSYS Makefiles\" -B ../nCine-build-Release -D CMAKE_BUILD_TYPE=Release -D NCINE_DYNAMIC_LIBRARY=OFF -D NCINE_PREFERRED_BACKEND=SDL2 -D NCINE_WITH_WEBP=OFF -D NCINE_WITH_AUDIO=OFF -D NCINE_BUILD_TESTS=OFF'
          C:\msys64\usr\bin\bash.exe -lc 'make -j2 -C ../nCine-build-Release'
      }
      else
      {
          C:\msys64\usr\bin\bash.exe -lc 'cmake -G \"MSYS Makefiles\" -B ../nCine-build-$(BuildType) -D CMAKE_BUILD_TYPE=$(BuildType) -D NCINE_DYNAMIC_LIBRARY=OFF -D NCINE_PREFERRED_BACKEND=SDL2 -D NCINE_WITH_WEBP=OFF -D NCINE_WITH_AUDIO=OFF -D NCINE_BUILD_TESTS=OFF'
          C:\msys64\usr\bin\bash.exe -lc 'make -j2 -C ../nCine-build-$(BuildType)'
      }

    displayName: 'CMake Configuration and Make of nCine as a static library on MinGW'
    condition: eq( variables['Compiler'], 'mingw64' )
    env:
      CHERE_INVOKING: on

  - powershell: |
      $env:generator = switch ("$(imageName)")
      {
        "windows-2019" {"Visual Studio 16 2019"}
        "vs2017-win2016" {"Visual Studio 15 2017"}
      }

      if ($env:BuildType -eq "BinDist")
        { cmake -G "$env:generator" -A x64 -B ../$(package_name)-build-$(BuildType) -D nCine_DIR=$(pwd)/../nCine-build-Release -D PMTRACER_ROOT=$(pwd)/../pmTracer }
      else
        { cmake -G "$env:generator" -A x64 -B ../$(package_name)-build-$(BuildType) -D nCine_DIR=$(pwd)/../nCine-build-$(BuildType) -D PMTRACER_ROOT=$(pwd)/../pmTracer }

    displayName: 'CMake Configuration on Windows'
    condition: ne( variables['Compiler'], 'mingw64' )

  - powershell: |
      $env:PATH = "C:\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
      $env:MSYSTEM = "MINGW64"

      if ($env:BuildType -eq "BinDist")
        { C:\msys64\usr\bin\bash.exe -lc 'cmake -G \"MSYS Makefiles\" -B ../$(package_name)-build-$(BuildType) -D nCine_DIR=$(pwd)/../nCine-build-Release -D PMTRACER_ROOT=$(pwd)/../pmTracer' }
      else
        { C:\msys64\usr\bin\bash.exe -lc 'cmake -G \"MSYS Makefiles\" -B ../$(package_name)-build-$(BuildType) -D nCine_DIR=$(pwd)/../nCine-build-$(BuildType) -D PMTRACER_ROOT=$(pwd)/../pmTracer' }

    displayName: 'CMake Configuration on MinGW'
    condition: eq( variables['Compiler'], 'mingw64' )
    env:
      CHERE_INVOKING: on

  - powershell: |
      if ($env:BuildType -eq "BinDist")
        { cmake --build ../$(package_name)-build-$(BuildType) --config Release }
      else
        { cmake --build ../$(package_name)-build-$(BuildType) --config $(BuildType) }

    displayName: 'CMake Build on Windows'
    condition: ne( variables['Compiler'], 'mingw64' )

  - powershell: |
      $env:PATH = "C:\msys64\x86_64\bin;C:\msys64\usr\bin;$env:PATH"
      $env:MSYSTEM = "MINGW64"
      C:\msys64\usr\bin\bash.exe -lc 'make -j2 -C ../$(package_name)-build-$(BuildType)'

    displayName: 'Make on MinGW'
    condition: eq( variables['Compiler'], 'mingw64' )
    env:
      CHERE_INVOKING: on

  - powershell: |
      cmake --build ../$(package_name)-build-$(BuildType) --config Release --target package

    displayName: 'Package on Windows'
    condition: and( eq( variables['BuildType'], 'BinDist' ), ne( variables['Compiler'], 'mingw64' ) )

  - powershell: |
      $env:PATH = "C:\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
      $env:MSYSTEM = "MINGW64"
      $env:CHERE_INVOKING = 1

      C:\msys64\usr\bin\bash.exe -lc 'make package -C ../$(package_name)-build-$(BuildType)'

    displayName: 'Package on MinGW'
    condition: and( eq( variables['BuildType'], 'BinDist' ), eq( variables['Compiler'], 'mingw64' ) )

  - powershell: |
      git config --global user.email "pipelines@azure.com"
      git config --global user.name "Azure Pipelines"

      $env:GIT_REDIRECT_STDERR = '2>&1'
      $env:vsversion = switch ("$(imageName)")
      {
        "windows-2019" {"vs2019"}
        "vs2017-win2016" {"vs2017"}
      }

      $env:DEPLOY_BRANCH = $env:DEPLOY_BRANCH -replace "BRANCHNAME","$(Build.SourceBranchName)"
      if ($env:Compiler -ne "mingw64")
        { $env:DEPLOY_BRANCH = $env:DEPLOY_BRANCH -replace "OS","windows" -replace "COMPILER",$env:vsversion }
      else
        { $env:DEPLOY_BRANCH = $env:DEPLOY_BRANCH -replace "OS","mingw64" -replace "COMPILER",$env:CC }

      cd ..
      # ncTracer-artifacts repository is not part of the nCine organization
      git clone https://$env:MAPPED_GH_TOKEN@github.com/encelo/$(package_name)-artifacts.git 2>&1>$null
      cd $(package_name)-artifacts
      git checkout $env:DEPLOY_BRANCH; if (-not $?) { git checkout --orphan $env:DEPLOY_BRANCH }
      git reset
      git rm *

      if ($env:Compiler -ne "mingw64")
      {
        Move-Item -Path ..\$(package_name)-build-$(BuildType)\*.exe -Destination .
        Move-Item -Path ..\$(package_name)-build-$(BuildType)\*.zip -Destination .
        git add *.exe *.zip
      }
      else
      {
        Move-Item -Path ..\$(package_name)-build-$(BuildType)\*.tar.gz -Destination .
        git add *.tar.gz
      }

      git commit --amend -m "$env:DEPLOY_MESSAGE"; if (-not $?) { git commit -m "$env:DEPLOY_MESSAGE" }
      git push --force; if (-not $?) { git push --set-upstream origin $env:DEPLOY_BRANCH }

    displayName: 'Push Artifacts'
    condition: and( eq( variables['BuildType'], 'BinDist' ), succeeded() )
    env:
      MAPPED_GH_TOKEN: $(GH_TOKEN)
